// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using oneparalyzer.LeasingSystem.Employees.Infrastructure.Persistance;

#nullable disable

namespace oneparalyzer.LeasingSystem.Employees.Infrastructure.Migrations
{
    [DbContext(typeof(CompaniesDbContext))]
    partial class CompaniesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("HouseBuilding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("HouseNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StreetId");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegionId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CityId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Streets", (string)null);
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.DepartmentAggregate.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfficeId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.OfficeAggregate.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AddressId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Offices", (string)null);
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.Address", b =>
                {
                    b.HasOne("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.City", b =>
                {
                    b.HasOne("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.Street", b =>
                {
                    b.HasOne("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.DepartmentAggregate.Department", b =>
                {
                    b.OwnsMany("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.DepartmentAggregate.Department.PostIds#oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.PostAggregate.ValueObjects.PostId", "PostIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PostIds");

                            b1.HasKey("Id");

                            b1.HasIndex("DepartmentId");

                            b1.ToTable("PostIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.Navigation("PostIds");
                });

            modelBuilder.Entity("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.OfficeAggregate.Office", b =>
                {
                    b.HasOne("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.CustomerAggregate.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.OfficeAggregate.Office.DepartmentIds#oneparalyzer.LeasingSystem.Employees.Domain.AggregateModels.DepartmentAggregate.ValueObjects.DepartmentId", "DepartmentIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("DepartmentId");

                            b1.HasKey("Id");

                            b1.HasIndex("OfficeId");

                            b1.ToTable("OfficeDepartmentIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.Navigation("Address");

                    b.Navigation("DepartmentIds");
                });
#pragma warning restore 612, 618
        }
    }
}
